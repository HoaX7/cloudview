//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TimeSeries = newTimeSeriesTable("public", "time_series", "")

type timeSeriesTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnInteger
	TruncatedTimestamp postgres.ColumnInteger
	Series             postgres.ColumnString
	Type               postgres.ColumnString
	MetricPanelID      postgres.ColumnString
	CreatedAt          postgres.ColumnTimestampz
	UpdatedAt          postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TimeSeriesTable struct {
	timeSeriesTable

	EXCLUDED timeSeriesTable
}

// AS creates new TimeSeriesTable with assigned alias
func (a TimeSeriesTable) AS(alias string) *TimeSeriesTable {
	return newTimeSeriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TimeSeriesTable with assigned schema name
func (a TimeSeriesTable) FromSchema(schemaName string) *TimeSeriesTable {
	return newTimeSeriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TimeSeriesTable with assigned table prefix
func (a TimeSeriesTable) WithPrefix(prefix string) *TimeSeriesTable {
	return newTimeSeriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TimeSeriesTable with assigned table suffix
func (a TimeSeriesTable) WithSuffix(suffix string) *TimeSeriesTable {
	return newTimeSeriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTimeSeriesTable(schemaName, tableName, alias string) *TimeSeriesTable {
	return &TimeSeriesTable{
		timeSeriesTable: newTimeSeriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newTimeSeriesTableImpl("", "excluded", ""),
	}
}

func newTimeSeriesTableImpl(schemaName, tableName, alias string) timeSeriesTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		TruncatedTimestampColumn = postgres.IntegerColumn("truncated_timestamp")
		SeriesColumn             = postgres.StringColumn("series")
		TypeColumn               = postgres.StringColumn("type")
		MetricPanelIDColumn      = postgres.StringColumn("metric_panel_id")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampzColumn("updated_at")
		allColumns               = postgres.ColumnList{IDColumn, TruncatedTimestampColumn, SeriesColumn, TypeColumn, MetricPanelIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns           = postgres.ColumnList{SeriesColumn, TypeColumn, MetricPanelIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return timeSeriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		TruncatedTimestamp: TruncatedTimestampColumn,
		Series:             SeriesColumn,
		Type:               TypeColumn,
		MetricPanelID:      MetricPanelIDColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
