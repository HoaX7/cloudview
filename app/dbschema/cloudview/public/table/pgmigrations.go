//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Pgmigrations = newPgmigrationsTable("public", "pgmigrations", "")

type pgmigrationsTable struct {
	postgres.Table

	// Columns
	ID    postgres.ColumnInteger
	Name  postgres.ColumnString
	RunOn postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PgmigrationsTable struct {
	pgmigrationsTable

	EXCLUDED pgmigrationsTable
}

// AS creates new PgmigrationsTable with assigned alias
func (a PgmigrationsTable) AS(alias string) *PgmigrationsTable {
	return newPgmigrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PgmigrationsTable with assigned schema name
func (a PgmigrationsTable) FromSchema(schemaName string) *PgmigrationsTable {
	return newPgmigrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PgmigrationsTable with assigned table prefix
func (a PgmigrationsTable) WithPrefix(prefix string) *PgmigrationsTable {
	return newPgmigrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PgmigrationsTable with assigned table suffix
func (a PgmigrationsTable) WithSuffix(suffix string) *PgmigrationsTable {
	return newPgmigrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPgmigrationsTable(schemaName, tableName, alias string) *PgmigrationsTable {
	return &PgmigrationsTable{
		pgmigrationsTable: newPgmigrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newPgmigrationsTableImpl("", "excluded", ""),
	}
}

func newPgmigrationsTableImpl(schemaName, tableName, alias string) pgmigrationsTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		RunOnColumn    = postgres.TimestampColumn("run_on")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, RunOnColumn}
		mutableColumns = postgres.ColumnList{NameColumn, RunOnColumn}
	)

	return pgmigrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:    IDColumn,
		Name:  NameColumn,
		RunOn: RunOnColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
