//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnString
	Username             postgres.ColumnString
	Email                postgres.ColumnString
	AvatarURL            postgres.ColumnString
	SubscribedSince      postgres.ColumnTimestampz
	SubscriptionDaysLeft postgres.ColumnInteger
	LastLoginAt          postgres.ColumnTimestampz
	Metadata             postgres.ColumnString
	IsDeleted            postgres.ColumnBool
	CreatedAt            postgres.ColumnTimestampz
	UpdatedAt            postgres.ColumnTimestampz
	SubscriptionPlanID   postgres.ColumnInteger
	Permissions          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn                   = postgres.StringColumn("id")
		UsernameColumn             = postgres.StringColumn("username")
		EmailColumn                = postgres.StringColumn("email")
		AvatarURLColumn            = postgres.StringColumn("avatar_url")
		SubscribedSinceColumn      = postgres.TimestampzColumn("subscribed_since")
		SubscriptionDaysLeftColumn = postgres.IntegerColumn("subscription_days_left")
		LastLoginAtColumn          = postgres.TimestampzColumn("last_login_at")
		MetadataColumn             = postgres.StringColumn("metadata")
		IsDeletedColumn            = postgres.BoolColumn("is_deleted")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn            = postgres.TimestampzColumn("updated_at")
		SubscriptionPlanIDColumn   = postgres.IntegerColumn("subscription_plan_id")
		PermissionsColumn          = postgres.StringColumn("permissions")
		allColumns                 = postgres.ColumnList{IDColumn, UsernameColumn, EmailColumn, AvatarURLColumn, SubscribedSinceColumn, SubscriptionDaysLeftColumn, LastLoginAtColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn, SubscriptionPlanIDColumn, PermissionsColumn}
		mutableColumns             = postgres.ColumnList{UsernameColumn, EmailColumn, AvatarURLColumn, SubscribedSinceColumn, SubscriptionDaysLeftColumn, LastLoginAtColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn, SubscriptionPlanIDColumn, PermissionsColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Username:             UsernameColumn,
		Email:                EmailColumn,
		AvatarURL:            AvatarURLColumn,
		SubscribedSince:      SubscribedSinceColumn,
		SubscriptionDaysLeft: SubscriptionDaysLeftColumn,
		LastLoginAt:          LastLoginAtColumn,
		Metadata:             MetadataColumn,
		IsDeleted:            IsDeletedColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		SubscriptionPlanID:   SubscriptionPlanIDColumn,
		Permissions:          PermissionsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
