//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProviderAccounts = newProviderAccountsTable("public", "provider_accounts", "")

type providerAccountsTable struct {
	postgres.Table

	// Columns
	ID                      postgres.ColumnString
	Name                    postgres.ColumnString
	Description             postgres.ColumnString
	AccessKeyID             postgres.ColumnString
	AccessKeySecret         postgres.ColumnString
	RotationSecretKey       postgres.ColumnString
	Provider                postgres.ColumnString
	ProjectID               postgres.ColumnString
	Metadata                postgres.ColumnString
	IsDeleted               postgres.ColumnBool
	CreatedAt               postgres.ColumnTimestampz
	UpdatedAt               postgres.ColumnTimestampz
	DeletedAt               postgres.ColumnTimestampz
	Type                    postgres.ColumnString
	AccountID               postgres.ColumnString
	AccessRole              postgres.ColumnString
	FeatureAccessPermission postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProviderAccountsTable struct {
	providerAccountsTable

	EXCLUDED providerAccountsTable
}

// AS creates new ProviderAccountsTable with assigned alias
func (a ProviderAccountsTable) AS(alias string) *ProviderAccountsTable {
	return newProviderAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProviderAccountsTable with assigned schema name
func (a ProviderAccountsTable) FromSchema(schemaName string) *ProviderAccountsTable {
	return newProviderAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProviderAccountsTable with assigned table prefix
func (a ProviderAccountsTable) WithPrefix(prefix string) *ProviderAccountsTable {
	return newProviderAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProviderAccountsTable with assigned table suffix
func (a ProviderAccountsTable) WithSuffix(suffix string) *ProviderAccountsTable {
	return newProviderAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProviderAccountsTable(schemaName, tableName, alias string) *ProviderAccountsTable {
	return &ProviderAccountsTable{
		providerAccountsTable: newProviderAccountsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newProviderAccountsTableImpl("", "excluded", ""),
	}
}

func newProviderAccountsTableImpl(schemaName, tableName, alias string) providerAccountsTable {
	var (
		IDColumn                      = postgres.StringColumn("id")
		NameColumn                    = postgres.StringColumn("name")
		DescriptionColumn             = postgres.StringColumn("description")
		AccessKeyIDColumn             = postgres.StringColumn("access_key_id")
		AccessKeySecretColumn         = postgres.StringColumn("access_key_secret")
		RotationSecretKeyColumn       = postgres.StringColumn("rotation_secret_key")
		ProviderColumn                = postgres.StringColumn("provider")
		ProjectIDColumn               = postgres.StringColumn("project_id")
		MetadataColumn                = postgres.StringColumn("metadata")
		IsDeletedColumn               = postgres.BoolColumn("is_deleted")
		CreatedAtColumn               = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn               = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn               = postgres.TimestampzColumn("deleted_at")
		TypeColumn                    = postgres.StringColumn("type")
		AccountIDColumn               = postgres.StringColumn("account_id")
		AccessRoleColumn              = postgres.StringColumn("access_role")
		FeatureAccessPermissionColumn = postgres.StringColumn("feature_access_permission")
		allColumns                    = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, AccessKeyIDColumn, AccessKeySecretColumn, RotationSecretKeyColumn, ProviderColumn, ProjectIDColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TypeColumn, AccountIDColumn, AccessRoleColumn, FeatureAccessPermissionColumn}
		mutableColumns                = postgres.ColumnList{NameColumn, DescriptionColumn, AccessKeyIDColumn, AccessKeySecretColumn, RotationSecretKeyColumn, ProviderColumn, ProjectIDColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TypeColumn, AccountIDColumn, AccessRoleColumn, FeatureAccessPermissionColumn}
	)

	return providerAccountsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                      IDColumn,
		Name:                    NameColumn,
		Description:             DescriptionColumn,
		AccessKeyID:             AccessKeyIDColumn,
		AccessKeySecret:         AccessKeySecretColumn,
		RotationSecretKey:       RotationSecretKeyColumn,
		Provider:                ProviderColumn,
		ProjectID:               ProjectIDColumn,
		Metadata:                MetadataColumn,
		IsDeleted:               IsDeletedColumn,
		CreatedAt:               CreatedAtColumn,
		UpdatedAt:               UpdatedAtColumn,
		DeletedAt:               DeletedAtColumn,
		Type:                    TypeColumn,
		AccountID:               AccountIDColumn,
		AccessRole:              AccessRoleColumn,
		FeatureAccessPermission: FeatureAccessPermissionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
