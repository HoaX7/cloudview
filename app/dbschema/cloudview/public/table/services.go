//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Services = newServicesTable("public", "services", "")

type servicesTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnString
	Name              postgres.ColumnString
	Description       postgres.ColumnString
	AccessKeyID       postgres.ColumnString
	AccessKeySecret   postgres.ColumnString
	RotationSecretKey postgres.ColumnString
	Provider          postgres.ColumnString
	ProjectID         postgres.ColumnString
	Metadata          postgres.ColumnString
	IsDeleted         postgres.ColumnBool
	CreatedAt         postgres.ColumnTimestampz
	UpdatedAt         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ServicesTable struct {
	servicesTable

	EXCLUDED servicesTable
}

// AS creates new ServicesTable with assigned alias
func (a ServicesTable) AS(alias string) *ServicesTable {
	return newServicesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ServicesTable with assigned schema name
func (a ServicesTable) FromSchema(schemaName string) *ServicesTable {
	return newServicesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ServicesTable with assigned table prefix
func (a ServicesTable) WithPrefix(prefix string) *ServicesTable {
	return newServicesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ServicesTable with assigned table suffix
func (a ServicesTable) WithSuffix(suffix string) *ServicesTable {
	return newServicesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newServicesTable(schemaName, tableName, alias string) *ServicesTable {
	return &ServicesTable{
		servicesTable: newServicesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newServicesTableImpl("", "excluded", ""),
	}
}

func newServicesTableImpl(schemaName, tableName, alias string) servicesTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		NameColumn              = postgres.StringColumn("name")
		DescriptionColumn       = postgres.StringColumn("description")
		AccessKeyIDColumn       = postgres.StringColumn("access_key_id")
		AccessKeySecretColumn   = postgres.StringColumn("access_key_secret")
		RotationSecretKeyColumn = postgres.StringColumn("rotation_secret_key")
		ProviderColumn          = postgres.StringColumn("provider")
		ProjectIDColumn         = postgres.StringColumn("project_id")
		MetadataColumn          = postgres.StringColumn("metadata")
		IsDeletedColumn         = postgres.BoolColumn("is_deleted")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampzColumn("updated_at")
		allColumns              = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, AccessKeyIDColumn, AccessKeySecretColumn, RotationSecretKeyColumn, ProviderColumn, ProjectIDColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns          = postgres.ColumnList{NameColumn, DescriptionColumn, AccessKeyIDColumn, AccessKeySecretColumn, RotationSecretKeyColumn, ProviderColumn, ProjectIDColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return servicesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Name:              NameColumn,
		Description:       DescriptionColumn,
		AccessKeyID:       AccessKeyIDColumn,
		AccessKeySecret:   AccessKeySecretColumn,
		RotationSecretKey: RotationSecretKeyColumn,
		Provider:          ProviderColumn,
		ProjectID:         ProjectIDColumn,
		Metadata:          MetadataColumn,
		IsDeleted:         IsDeletedColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
