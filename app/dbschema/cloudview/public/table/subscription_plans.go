//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SubscriptionPlans = newSubscriptionPlansTable("public", "subscription_plans", "")

type subscriptionPlansTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Tier        postgres.ColumnInteger
	Cost        postgres.ColumnFloat
	Currency    postgres.ColumnString
	Metadata    postgres.ColumnString
	IsDeleted   postgres.ColumnBool
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubscriptionPlansTable struct {
	subscriptionPlansTable

	EXCLUDED subscriptionPlansTable
}

// AS creates new SubscriptionPlansTable with assigned alias
func (a SubscriptionPlansTable) AS(alias string) *SubscriptionPlansTable {
	return newSubscriptionPlansTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubscriptionPlansTable with assigned schema name
func (a SubscriptionPlansTable) FromSchema(schemaName string) *SubscriptionPlansTable {
	return newSubscriptionPlansTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubscriptionPlansTable with assigned table prefix
func (a SubscriptionPlansTable) WithPrefix(prefix string) *SubscriptionPlansTable {
	return newSubscriptionPlansTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubscriptionPlansTable with assigned table suffix
func (a SubscriptionPlansTable) WithSuffix(suffix string) *SubscriptionPlansTable {
	return newSubscriptionPlansTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubscriptionPlansTable(schemaName, tableName, alias string) *SubscriptionPlansTable {
	return &SubscriptionPlansTable{
		subscriptionPlansTable: newSubscriptionPlansTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newSubscriptionPlansTableImpl("", "excluded", ""),
	}
}

func newSubscriptionPlansTableImpl(schemaName, tableName, alias string) subscriptionPlansTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		TierColumn        = postgres.IntegerColumn("tier")
		CostColumn        = postgres.FloatColumn("cost")
		CurrencyColumn    = postgres.StringColumn("currency")
		MetadataColumn    = postgres.StringColumn("metadata")
		IsDeletedColumn   = postgres.BoolColumn("is_deleted")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, TierColumn, CostColumn, CurrencyColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, DescriptionColumn, TierColumn, CostColumn, CurrencyColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return subscriptionPlansTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Tier:        TierColumn,
		Cost:        CostColumn,
		Currency:    CurrencyColumn,
		Metadata:    MetadataColumn,
		IsDeleted:   IsDeletedColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
