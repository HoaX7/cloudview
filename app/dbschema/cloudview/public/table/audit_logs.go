//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuditLogs = newAuditLogsTable("public", "audit_logs", "")

type auditLogsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	Name        postgres.ColumnString
	Action      postgres.ColumnString
	Description postgres.ColumnString
	Email       postgres.ColumnString
	UserID      postgres.ColumnString
	ProjectID   postgres.ColumnString
	Metadata    postgres.ColumnString
	IsDeleted   postgres.ColumnBool
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuditLogsTable struct {
	auditLogsTable

	EXCLUDED auditLogsTable
}

// AS creates new AuditLogsTable with assigned alias
func (a AuditLogsTable) AS(alias string) *AuditLogsTable {
	return newAuditLogsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuditLogsTable with assigned schema name
func (a AuditLogsTable) FromSchema(schemaName string) *AuditLogsTable {
	return newAuditLogsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuditLogsTable with assigned table prefix
func (a AuditLogsTable) WithPrefix(prefix string) *AuditLogsTable {
	return newAuditLogsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuditLogsTable with assigned table suffix
func (a AuditLogsTable) WithSuffix(suffix string) *AuditLogsTable {
	return newAuditLogsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuditLogsTable(schemaName, tableName, alias string) *AuditLogsTable {
	return &AuditLogsTable{
		auditLogsTable: newAuditLogsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAuditLogsTableImpl("", "excluded", ""),
	}
}

func newAuditLogsTableImpl(schemaName, tableName, alias string) auditLogsTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		NameColumn        = postgres.StringColumn("name")
		ActionColumn      = postgres.StringColumn("action")
		DescriptionColumn = postgres.StringColumn("description")
		EmailColumn       = postgres.StringColumn("email")
		UserIDColumn      = postgres.StringColumn("user_id")
		ProjectIDColumn   = postgres.StringColumn("project_id")
		MetadataColumn    = postgres.StringColumn("metadata")
		IsDeletedColumn   = postgres.BoolColumn("is_deleted")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, ActionColumn, DescriptionColumn, EmailColumn, UserIDColumn, ProjectIDColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, ActionColumn, DescriptionColumn, EmailColumn, UserIDColumn, ProjectIDColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return auditLogsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Action:      ActionColumn,
		Description: DescriptionColumn,
		Email:       EmailColumn,
		UserID:      UserIDColumn,
		ProjectID:   ProjectIDColumn,
		Metadata:    MetadataColumn,
		IsDeleted:   IsDeletedColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
