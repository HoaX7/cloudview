//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Anamolies = newAnamoliesTable("public", "anamolies", "")

type anamoliesTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnString
	Name              postgres.ColumnString
	Description       postgres.ColumnString
	InstanceID        postgres.ColumnString
	ProviderAccountID postgres.ColumnString
	Metadata          postgres.ColumnString
	IsDeleted         postgres.ColumnBool
	CreatedAt         postgres.ColumnTimestampz
	UpdatedAt         postgres.ColumnTimestampz
	DeletedAt         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AnamoliesTable struct {
	anamoliesTable

	EXCLUDED anamoliesTable
}

// AS creates new AnamoliesTable with assigned alias
func (a AnamoliesTable) AS(alias string) *AnamoliesTable {
	return newAnamoliesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AnamoliesTable with assigned schema name
func (a AnamoliesTable) FromSchema(schemaName string) *AnamoliesTable {
	return newAnamoliesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AnamoliesTable with assigned table prefix
func (a AnamoliesTable) WithPrefix(prefix string) *AnamoliesTable {
	return newAnamoliesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AnamoliesTable with assigned table suffix
func (a AnamoliesTable) WithSuffix(suffix string) *AnamoliesTable {
	return newAnamoliesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAnamoliesTable(schemaName, tableName, alias string) *AnamoliesTable {
	return &AnamoliesTable{
		anamoliesTable: newAnamoliesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAnamoliesTableImpl("", "excluded", ""),
	}
}

func newAnamoliesTableImpl(schemaName, tableName, alias string) anamoliesTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		NameColumn              = postgres.StringColumn("name")
		DescriptionColumn       = postgres.StringColumn("description")
		InstanceIDColumn        = postgres.StringColumn("instance_id")
		ProviderAccountIDColumn = postgres.StringColumn("provider_account_id")
		MetadataColumn          = postgres.StringColumn("metadata")
		IsDeletedColumn         = postgres.BoolColumn("is_deleted")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn         = postgres.TimestampzColumn("deleted_at")
		allColumns              = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, InstanceIDColumn, ProviderAccountIDColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns          = postgres.ColumnList{NameColumn, DescriptionColumn, InstanceIDColumn, ProviderAccountIDColumn, MetadataColumn, IsDeletedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return anamoliesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Name:              NameColumn,
		Description:       DescriptionColumn,
		InstanceID:        InstanceIDColumn,
		ProviderAccountID: ProviderAccountIDColumn,
		Metadata:          MetadataColumn,
		IsDeleted:         IsDeletedColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		DeletedAt:         DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
